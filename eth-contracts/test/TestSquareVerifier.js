// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('SquareVerifier')


contract("Test SquareVerifier", accounts => {
  
  const owner = accounts[0] 
  

  const correctProof = {
    "proof": {
        "a": ["0x197629b6157b4aff620077a44f3f89e8968a0b5af5d59fadd340a4c8087c35f2", "0x0870a5df0381b6d769aa1a61e7bd3ad65b5660af4f620ef886d4dfe444a57db3"],
        "b": [["0x255c4cd07c3b7cc2c6a73c46a7985361cb69efe95037cf92682255074e931ae2", "0x06e9312c0d53d64a2d5d988b08d89a6b17872e5f00c53c8320d956b8176f2952"], ["0x1925d41fa68aef7cfe4f0b30ef524bde1caa8dcb28736d8c4575c51e05ee3f50", "0x20a9d3df5dbd7d5a99aa18cbda28eb10f582be0d86098b59758a99c72d7b6361"]],
        "c": ["0x1b7b1c119d292e82f3a73938077f9ee41388963ce5f2c2e44493e084ff501de1", "0x1270572d55c12421c9414271f6a8080b94190cf88f2731b9421d3e526e90a7dc"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000001"]
}

  const incorrectProof = {
      proof: {
          a: ["0x10403b2a6ee758d8cc5a23ee95a932be0120293703d4d98a68786edcfc235eee", "0x305d19b99b22d356942b6360ccfb9ad341fd954c7a41bf4fb87075d8cf4057cc"],
          b: [["0x0ba0a0146e73b254edc523cedfebd584ec69d76450714fdba233daab0895fb8e", "0x1b4ed25ebc18d558fa8bd3ac5dcc6ff5a5a99cf99a789d14add292ffa91aaefa"], ["0x1572061dee5c87ef90160084dea0ecbf285490b49160e159b2669ff24189498b", "0x1a0cd884bc2f73602e2d370446084bac173ac0648b596b1dfc32142d2b8ea9c4"]],
          c: ["0x22704f34d4a6306a2c1c6fba6d71cd96b09e6f6156112244126d60a5cec515c8", "0x2708e0a59e64be5214a1971b39b0cc357a9fba1c9973fe669235c33a20b1cdc4"]
      },
      inputs: ["0x0000000000000000000000000000000000000000000000000000000000000003", "0x0000000000000000000000000000000000000000000000000000000000000000"]
    }


  
  describe('testing Squareverifier', function(){
    beforeEach(async function () {
      this.contract = await Verifier.new({from: owner})
      // Test verification with correct proof
      // - use the contents from proof.json generated from zokrates steps
    })
    it('test correct proof', async function () {
      let result = await this.contract.verifyTx.call(correctProof.proof.a,
        correctProof.proof.b, correctProof.proof.c, correctProof.inputs)

      assert.equal(result, true, "Error: the test should Equal True")
    })


    // Test verification with incorrect proof
    it('test incorrect proof', async function () {
      let result = await this.contract.verifyTx.call(incorrectProof.proof.a,
        incorrectProof.proof.b, incorrectProof.proof.c, incorrectProof.inputs)

      assert.equal(result, false, "Error: the test should Equal false")
    })

  })
})